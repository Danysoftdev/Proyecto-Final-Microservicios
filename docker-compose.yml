services:
  db: # - The db refers to the container where the database will be stored.
    build: 
      context: ./MySQL # - The context refers to the path where the Dockerfile is located.
      dockerfile: Dockerfile
    container_name: database_parcial # nombre del contenedor.
    restart: always # el contenedor se reiniciará siempre que se detenga
    ports:
      - 3306:3306 # primer puerto es el de la maquina local, segundo el del docker
    volumes:
      - ./MySQL/volumes:/var/lib/mysql # dónde se guardará la información de la base de datos
    hostname: eam_database
    networks:
      - net_eam_database # nombre de la red para que los contenedores se comuniquen, ya que usualmente no se pueden comunicar entre sí.
    healthcheck:
        test: ["CMD","mysql", "-u", "root", "-proot"]
        interval: 30s
        timeout: 10s
        retries: 5
# --------------------------------------------------------------------
  # - The adminer is a tool for managing content in databases.
  adminer:
    image: adminer
    container_name: adminer_parcial
    restart: always
    ports:
      - 8080:8080 #el segundo puerto debe de ser el mismo que está en FastAPI
    networks:
      - net_eam_database
# --------------------------------------------------------------------
  # - fastapi refers to the container where the application backend will be stored.
  fastapi:
    build: 
      context: ./FastAPI
      dockerfile: Dockerfile
    container_name: backend_parcial
    restart: always
    ports:
      - "8000:80"
    depends_on: #si db no está funcionando correctamente, fastapi no se levanta
      db:
        condition: service_healthy
    networks:
      - net_eam_database
# --------------------------------------------------------------------

networks: #red para que los contenedores se comuniquen
  net_eam_database:
      driver: bridge
      name: net_eam_database